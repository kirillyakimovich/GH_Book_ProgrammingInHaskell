-- Haskell Playground 1.0
let f = (1 +)
let p = even

let xs = [1..10]
[f x | x <- xs, p x]

(map f . filter p) xs
(filter p . map f) xs

all' (>0) [1..10]
all' (<10) [1,3,5,7,9]
all' (==1) [1,1,0,1,1]
all' even [2,4,6,8,10]
all' (\x -> (x*x)/4 > 10) [5,10,15]

any' (1==) [0,1,2,3,4,5]
any' (>5) [0,1,2,3,4,5]
any' even [1,3,5,7,9]
any' (\x -> x*4>20) [1,2,3,4,5,6]

takeWhile' (<3) [1,2,3,4,5]
takeWhile' (>3) [1,2,3,4,5]
takeWhile' odd [1,3,5,7,9,10,11,13,15,17]
takeWhile' (\x -> 6*x < 100) [1..20]
takeWhile' ('w'>) "hello world"

dropWhile' (<3) [1,2,3,4,5]
dropWhile' even [2,4,6,7,9,11,12,13,14]
dropWhile' (\x -> 6*x < 100) [1..20]
dropWhile' ('w'>) "hello, world"

mapf abs [-1,-3,4,-12]
mapf reverse ["abc","cda","1234"]
mapf (3*) [1,2,3,4]
mapf (recip . negate) [1,4,-5,0.1]

filterf (>5) [1,2,3,4,5,6,7,8]
filterf odd [3,6,7,9,12,14]

dec2int [2,3,4,5]

curry' fst 1 2
uncurry mod (7,4)

chop8' [1..16]

map' (3*) [1,2,3,4]

take 10 (iterate' (2*) 1)
take 10 (iterate' (\x -> (x+3)*2) 1)